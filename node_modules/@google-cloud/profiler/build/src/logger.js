"use strict";
// Copyright 2017 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLogger = exports.Logger = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
const config_1 = require("./config");
const logging_min_1 = require("@google-cloud/logging-min");
const logging = new logging_min_1.Logging();
// migrating from 'console-log-level' package we keep
// min and max log levels numeric interface used there
const [MIN_LEVEL, MAX_LEVEL] = [0, 4];
logging.setProjectId().catch(err => {
    console.error(`failed to set logging project id ${err}`);
});
logging.setDetectedResource().catch(err => {
    console.error(`failed to discover resource metadata ${err}`);
});
// eslint-disable-next-line @typescript-eslint/no-var-requires
const pjson = require('../../package.json');
class Logger {
    constructor(level) {
        this.level = level;
        if (level === undefined) {
            level = config_1.defaultConfig.logLevel;
        }
        if (level < MIN_LEVEL) {
            level = MIN_LEVEL;
        }
        else if (level > MAX_LEVEL) {
            level = MAX_LEVEL;
        }
        this.severityThreshold = level;
        this.log = logging.logSync(pjson.name);
    }
    debug(msg) {
        if (this.severityThreshold > 3) {
            this.log.debug(this.log.entry(this.toOneLine(msg)));
        }
    }
    info(msg) {
        if (this.severityThreshold > 2) {
            this.log.info(this.log.entry(this.toOneLine(msg)));
        }
    }
    warn(msg) {
        if (this.severityThreshold > 1) {
            this.log.warning(this.log.entry(this.toOneLine(msg)));
        }
    }
    error(msg) {
        if (this.severityThreshold > 0) {
            this.log.error(this.log.entry(this.toOneLine(msg)));
        }
    }
    toOneLine(msg) {
        const temp = msg.replace('\r\n', '\\r\\n');
        return temp.replace('\n', '\\n');
    }
}
exports.Logger = Logger;
function createLogger(level) {
    return new Logger(level);
}
exports.createLogger = createLogger;
//# sourceMappingURL=logger.js.map