"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.detectServiceContext=exports.getDefaultResource=exports.getGlobalDescriptor=exports.getGKEDescriptor=exports.KUBERNETES_NAMESPACE_ID_PATH=exports.getGCEDescriptor=exports.getGAEDescriptor=exports.getCloudRunDescriptor=exports.getCloudFunctionDescriptor=void 0;const fs=require("fs");const gcpMetadata=require("gcp-metadata");const google_auth_library_1=require("google-auth-library");const util_1=require("util");const readFile=(0,util_1.promisify)(fs.readFile);function zoneFromQualifiedZone(qualified){return qualified.split("/").pop()}function regionFromQualifiedZone(qualified){const zone=zoneFromQualifiedZone(qualified);const region=zone===undefined?undefined:zone.slice(0,zone.lastIndexOf("-"));return region}async function getCloudFunctionDescriptor(){let region=undefined;if(!(process.env.GOOGLE_CLOUD_REGION||process.env.FUNCTION_REGION)){const qualifiedZone=await gcpMetadata.instance("zone");region=regionFromQualifiedZone(qualifiedZone)}return{type:"cloud_function",labels:{function_name:process.env.K_SERVICE||process.env.FUNCTION_NAME,region:process.env.GOOGLE_CLOUD_REGION||process.env.FUNCTION_REGION||region}}}exports.getCloudFunctionDescriptor=getCloudFunctionDescriptor;async function getCloudRunDescriptor(){const qualifiedZone=await gcpMetadata.instance("zone");const location=regionFromQualifiedZone(qualifiedZone);return{type:"cloud_run_revision",labels:{location:location,service_name:process.env.K_SERVICE,revision_name:process.env.K_REVISION,configuration_name:process.env.K_CONFIGURATION}}}exports.getCloudRunDescriptor=getCloudRunDescriptor;async function getGAEDescriptor(){const qualifiedZone=await gcpMetadata.instance("zone");const zone=zoneFromQualifiedZone(qualifiedZone);return{type:"gae_app",labels:{module_id:process.env.GAE_SERVICE||process.env.GAE_MODULE_NAME,version_id:process.env.GAE_VERSION,zone:zone}}}exports.getGAEDescriptor=getGAEDescriptor;async function getGCEDescriptor(){const idResponse=await gcpMetadata.instance("id");const zoneResponse=await gcpMetadata.instance("zone");const zone=zoneFromQualifiedZone(zoneResponse);return{type:"gce_instance",labels:{instance_id:idResponse.toString(),zone:zone}}}exports.getGCEDescriptor=getGCEDescriptor;exports.KUBERNETES_NAMESPACE_ID_PATH="/var/run/secrets/kubernetes.io/serviceaccount/namespace";async function getGKEDescriptor(){const resp=await gcpMetadata.instance("attributes/cluster-name");const qualifiedZone=await gcpMetadata.instance("zone");const location=zoneFromQualifiedZone(qualifiedZone);let namespace="";try{namespace=await readFile(exports.KUBERNETES_NAMESPACE_ID_PATH,"utf8")}catch(err){}return{type:"k8s_container",labels:{location:location,cluster_name:resp,namespace_name:namespace,pod_name:process.env.HOSTNAME,container_name:process.env.CONTAINER_NAME}}}exports.getGKEDescriptor=getGKEDescriptor;function getGlobalDescriptor(){return{type:"global"}}exports.getGlobalDescriptor=getGlobalDescriptor;async function getDefaultResource(auth){const env=await auth.getEnv();switch(env){case google_auth_library_1.GCPEnv.KUBERNETES_ENGINE:return getGKEDescriptor().catch(()=>getGlobalDescriptor());case google_auth_library_1.GCPEnv.APP_ENGINE:return getGAEDescriptor().catch(()=>getGlobalDescriptor());case google_auth_library_1.GCPEnv.CLOUD_FUNCTIONS:return getCloudFunctionDescriptor().catch(()=>getGlobalDescriptor());case google_auth_library_1.GCPEnv.CLOUD_RUN:return getCloudRunDescriptor().catch(()=>getGlobalDescriptor());case google_auth_library_1.GCPEnv.COMPUTE_ENGINE:return getGCEDescriptor().catch(()=>getGlobalDescriptor());default:return getGlobalDescriptor()}}exports.getDefaultResource=getDefaultResource;async function detectServiceContext(auth){const env=await auth.getEnv();switch(env){case google_auth_library_1.GCPEnv.APP_ENGINE:return{service:process.env.GAE_SERVICE||process.env.GAE_MODULE_NAME,version:process.env.GAE_VERSION||process.env.GAE_MODULE_VERSION};case google_auth_library_1.GCPEnv.CLOUD_FUNCTIONS:return{service:process.env.FUNCTION_NAME};case google_auth_library_1.GCPEnv.KUBERNETES_ENGINE:return{service:process.env.HOSTNAME};case google_auth_library_1.GCPEnv.CLOUD_RUN:return{service:process.env.K_SERVICE};case google_auth_library_1.GCPEnv.COMPUTE_ENGINE:return null;default:return null}}exports.detectServiceContext=detectServiceContext;
//# sourceMappingURL=metadata.js.map