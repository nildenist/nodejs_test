"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.toNanosAndSecondsObj=exports.zuluToDateObj=exports.decodeValue=exports.structToObj=exports.ObjectToStructConverter=exports.objToStruct=void 0;function objToStruct(obj,options){return new ObjectToStructConverter(options).convert(obj)}exports.objToStruct=objToStruct;class ObjectToStructConverter{constructor(options){options=options||{};this.seenObjects=new Set;this.removeCircular=options.removeCircular===true;this.stringify=options.stringify===true}convert(obj){const convertedObject={fields:{}};this.seenObjects.add(obj);for(const prop in obj){if(Object.prototype.hasOwnProperty.call(obj,prop)){const value=obj[prop];if(value===undefined){continue}convertedObject.fields[prop]=this.encodeValue_(value)}}this.seenObjects.delete(obj);return convertedObject}encodeValue_(value){let convertedValue;if(value===null){convertedValue={nullValue:0}}else if(typeof value==="number"){convertedValue={numberValue:value}}else if(typeof value==="string"){convertedValue={stringValue:value}}else if(typeof value==="boolean"){convertedValue={boolValue:value}}else if(Buffer.isBuffer(value)){convertedValue={blobValue:value}}else if(Array.isArray(value)){convertedValue={listValue:{values:value.map(this.encodeValue_.bind(this))}}}else if(Object.prototype.toString.call(value)==="[object Object]"){if(this.seenObjects.has(value)){if(!this.removeCircular){throw new Error(["This object contains a circular reference. To automatically","remove it, set the `removeCircular` option to true."].join(" "))}convertedValue={stringValue:"[Circular]"}}else{convertedValue={structValue:this.convert(value)}}}else{if(!this.stringify){throw new Error("Value of type "+typeof value+" not recognized.")}convertedValue={stringValue:String(value)}}return convertedValue}}exports.ObjectToStructConverter=ObjectToStructConverter;function structToObj(struct){const convertedObject={};for(const prop in struct.fields){if(struct.fields.hasOwnProperty(prop)){const value=struct.fields[prop];convertedObject[prop]=decodeValue(value)}}return convertedObject}exports.structToObj=structToObj;function decodeValue(value){switch(value.kind){case"structValue":{return structToObj(value.structValue)}case"nullValue":{return null}case"listValue":{return value.listValue.values.map(decodeValue)}default:{return value[value.kind]}}}exports.decodeValue=decodeValue;function zuluToDateObj(zuluTime){var _a;const ms=Date.parse(zuluTime.split(/[.,Z]/)[0]+"Z");const reNano=/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.(\d{0,9})Z$/;const nanoSecs=(_a=zuluTime.match(reNano))===null||_a===void 0?void 0:_a[1];return{seconds:ms?Math.floor(ms/1e3):0,nanos:nanoSecs?Number(nanoSecs.padEnd(9,"0")):0}}exports.zuluToDateObj=zuluToDateObj;function toNanosAndSecondsObj(date){const seconds=date.getTime()/1e3;const secondsRounded=Math.floor(seconds);return{seconds:secondsRounded,nanos:Math.floor((seconds-secondsRounded)*1e9)}}exports.toNanosAndSecondsObj=toNanosAndSecondsObj;
//# sourceMappingURL=common.js.map